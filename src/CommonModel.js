/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function CommonModel({ selectedModel, ...props }) {
  const group = useRef();
  //const { nodes, materials, animations }
  const danceModel = useGLTF("/dance_model.glb");
  const sittingModel = useGLTF("/sitting_model.glb");
  const defaultModel = useGLTF("/default_model.glb");

  const [nodes, setnodes] = useState(defaultModel.nodes);
  const [materials, setMaterials] = useState(defaultModel.materials);
  const defaultAnimations = useAnimations(defaultModel.animations, group);
  const danceAnimations = useAnimations(danceModel.animations, group);
  const sittingAnimations = useAnimations(sittingModel.animations, group);
  const [actions, setActions] = useState(null);

  useEffect(() => {
    if (selectedModel == "dance") {
      setnodes(danceModel.nodes);
      setMaterials(danceModel.materials);
      setActions(danceAnimations.actions);
    } else if (selectedModel == "sit") {
      setnodes(sittingModel.nodes);
      setMaterials(sittingModel.materials);
      setActions(sittingAnimations.actions);
    } else {
      setnodes(defaultModel.nodes);
      setMaterials(defaultModel.materials);
      setActions(defaultAnimations.actions);
    }
  }, [selectedModel]);

  useEffect(() => {
    if (actions) actions["Armature|mixamo.com|Layer0"].play();
  });

  // useEffect(() => {
  //   console.log(danceModel.animations[0].name);
  //   if (danceModel.animations.length <= 1) {
  //     const tepmAnimation = { ...danceModel.animations[0] };
  //     tepmAnimation.name = "custom_animation";
  //     danceModel.animations.push(tepmAnimation);
  //   }
  //   if (sittingModel.animations.length <= 1) {
  //     const tepmAnimation = { ...sittingModel.animations[0] };
  //     tepmAnimation.name = "custom_animation";
  //     sittingModel.animations.push(tepmAnimation);
  //   }
  //   if (defaultModel.animations.length <= 1) {
  //     const tepmAnimation = { ...defaultModel.animations[0] };
  //     tepmAnimation.name = "custom_animation";
  //     defaultModel.animations.push(tepmAnimation);
  //   }
  //   if (actions && actions["custom_animation"]) {
  //     actions["custom_animation"].play();
  //   }
  // });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Boy01_Body_Geo"
            geometry={nodes.Boy01_Body_Geo.geometry}
            material={materials.Boy01_Body_MAT1}
            skeleton={nodes.Boy01_Body_Geo.skeleton}
          />
          <skinnedMesh
            name="Boy01_Brows_Geo"
            geometry={nodes.Boy01_Brows_Geo.geometry}
            material={materials.Boy01_Brows_MAT2}
            skeleton={nodes.Boy01_Brows_Geo.skeleton}
          />
          <skinnedMesh
            name="Boy01_Eyes_Geo"
            geometry={nodes.Boy01_Eyes_Geo.geometry}
            material={materials.Boy01_Eyes_MAT2}
            skeleton={nodes.Boy01_Eyes_Geo.skeleton}
          />
          <skinnedMesh
            name="h_Geo"
            geometry={nodes.h_Geo.geometry}
            material={materials.Boy01_Mouth_MAT2}
            skeleton={nodes.h_Geo.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/dance_model.glb");
useGLTF.preload("/sitting_model.glb");
useGLTF.preload("/default_model.glb");

export default CommonModel;
