/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function CommonModel({ selectedModel, ...props }) {
  const group = useRef();
  //const { nodes, materials, animations }
  const CrouchingModel = useGLTF("glb/Crouching.glb");
  const LiftingObjectModel = useGLTF("glb/LiftingObject.glb");
  const PickingUpModel = useGLTF("glb/PickingUp.glb");
  const SnatchModel = useGLTF("glb/Snatch.glb");
  const DefaultModel = useGLTF("glb/Default.glb");

  const [nodes, setnodes] = useState(DefaultModel.nodes);
  const [materials, setMaterials] = useState(DefaultModel.materials);
  const defaultAnimations = useAnimations(DefaultModel.animations, group);
  const crouchingAnimations = useAnimations(CrouchingModel.animations, group);
  const liftingObjectAnimations = useAnimations(
    LiftingObjectModel.animations,
    group
  );
  const pickingUpAnimations = useAnimations(PickingUpModel.animations, group);
  const snatchAnimations = useAnimations(SnatchModel.animations, group);
  const [actions, setActions] = useState(null);

  useEffect(() => {
    console.log(selectedModel);
    if (selectedModel == "Crouching") {
      setnodes(CrouchingModel.nodes);
      setMaterials(CrouchingModel.materials);
      setActions(crouchingAnimations.actions);
    } else if (selectedModel == "Lifting Object") {
      setnodes(LiftingObjectModel.nodes);
      setMaterials(LiftingObjectModel.materials);
      setActions(liftingObjectAnimations.actions);
    } else if (selectedModel == "Picking Up") {
      setnodes(PickingUpModel.nodes);
      setMaterials(PickingUpModel.materials);
      setActions(pickingUpAnimations.actions);
    } else if (selectedModel == "Snatch") {
      setnodes(SnatchModel.nodes);
      setMaterials(SnatchModel.materials);
      setActions(snatchAnimations.actions);
    } else {
      setnodes(DefaultModel.nodes);
      setMaterials(DefaultModel.materials);
      setActions(defaultAnimations.actions);
    }
  }, [selectedModel]);

  useEffect(() => {
    if (actions) actions["Armature|mixamo.com|Layer0"].play();
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorig1Hips} />
          <skinnedMesh
            name="Ch17_Body"
            geometry={nodes.Ch17_Body.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Body.skeleton}
          />
          <skinnedMesh
            name="Ch17_Boots"
            geometry={nodes.Ch17_Boots.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Boots.skeleton}
          />
          <skinnedMesh
            name="Ch17_Eyelashes"
            geometry={nodes.Ch17_Eyelashes.geometry}
            material={materials.Ch17_hair}
            skeleton={nodes.Ch17_Eyelashes.skeleton}
          />
          <skinnedMesh
            name="Ch17_Hair"
            geometry={nodes.Ch17_Hair.geometry}
            material={materials.Ch17_hair}
            skeleton={nodes.Ch17_Hair.skeleton}
          />
          <skinnedMesh
            name="Ch17_Helmet"
            geometry={nodes.Ch17_Helmet.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Helmet.skeleton}
          />
          <skinnedMesh
            name="Ch17_Pants"
            geometry={nodes.Ch17_Pants.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Pants.skeleton}
          />
          <skinnedMesh
            name="Ch17_Shirt"
            geometry={nodes.Ch17_Shirt.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Shirt.skeleton}
          />
          <skinnedMesh
            name="Ch17_Vest"
            geometry={nodes.Ch17_Vest.geometry}
            material={materials.Ch17_body}
            skeleton={nodes.Ch17_Vest.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("glb/Crouching.glb");
useGLTF.preload("glb/LiftingObject.glb");
useGLTF.preload("glb/PickingUp.glb");
useGLTF.preload("glb/Snatch.glb");
useGLTF.preload("glb/Default.glb");

export default CommonModel;
